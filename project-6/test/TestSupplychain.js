// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originMakerID = accounts[1]
    const originFactoryName = "Get Well Pharmaceuticals"
    const originFactoryInformation = "Industrial Area"
    const originFactoryLatitude = "-38.239770"
    const originFactoryLongitude = "144.341490"
    var medicineID = sku + upc
    const medicineNotes = "Best beans for Espresso"
    const medicinePrice = web3.toWei(1, "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const pharmacyID = accounts[3]
    const patientID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95 owner
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a farmer
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Maker: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Pharmacy: accounts[3] ", accounts[3])
    console.log("Patient: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function researchItem() that allows a drug maker to research medicine", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Researched()
        var event = supplyChain.Researched()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Researched by calling function researchItem()
        await supplyChain.researchItem(upc, originMakerID, originFactoryName, originFactoryInformation, originFactoryLatitude, originFactoryLongitude, medicineNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMakerID, 'Error: Missing or Invalid originMakerID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 2nd Test
    it("Testing smart contract function processItem() that allows a maker to process medicine", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Processed()
        let event = supplyChain.Processed()
        await event.watch((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc, {from: accounts[1]});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMakerID, 'Error: Missing or Invalid originMakerID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 3rd Test
    it("Testing smart contract function packItem() that allows a maker to pack medicine", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Packed()
        let event = supplyChain.Packed();
        await event.watch((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, {from: accounts[1]});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMakerID, 'Error: Missing or Invalid originMakerID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 4th Test
    it("Testing smart contract function sellItem() that allows a maker to sell medicine", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event ForSale()
        let event = supplyChain.ForSale();
        await event.watch((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, medicinePrice, {from: accounts[1]});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMakerID, 'Error: Missing or Invalid originMakerID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactorynformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[4], medicinePrice, 'Error: Missing or Invalid medicinePrice')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy medicine", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Sold()
        let event = supplyChain.Sold()
        await event.watch((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {from: accounts[2], value: medicinePrice});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMakerID, 'Error: Missing or Invalid originMakerID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[4], medicinePrice, 'Error: Missing or Invalid medicinePrice')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship medicine", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Shipped()
        let event = supplyChain.Shipped();
        await event.watch((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.shipItem(upc, {from: distributorID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMakerID, 'Error: Missing or Invalid originMakerID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[4], medicinePrice, 'Error: Missing or Invalid medicinePrice')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a pharmacy to mark medicine received", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Received()
        let event = supplyChain.Received();
        await event.watch((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as Received by calling function receiveItem()
        await supplyChain.receiveItem(upc, {from: pharmacyID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], pharmacyID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMakerID, 'Error: Missing or Invalid originMakerID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[4], medicinePrice, 'Error: Missing or Invalid medicinePrice')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[7], pharmacyID, 'Error: Missing or Invalid pharmacyID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a patient to purchase medicine", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Purchased()
        let event = supplyChain.Purchased();
        await event.watch((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.purchaseItem(upc, {from: patientID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], patientID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMakerID, 'Error: Missing or Invalid originMakerID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[4], medicinePrice, 'Error: Missing or Invalid medicinePrice')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[7], pharmacyID, 'Error: Missing or Invalid pharmacyID')
        assert.equal(resultBufferTwo[8], patientID, 'Error: Missing or Invalid patientID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);

        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], patientID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMakerID, 'Error: Missing or Invalid originMakerID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], medicineID, 'Error: Invalid medicineID')
        assert.equal(resultBufferTwo[3], medicineNotes, 'Error: Invalid medicineNotes')
        assert.equal(resultBufferTwo[4], medicinePrice, 'Error: Missing or Invalid medicinePrice')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[7], pharmacyID, 'Error: Missing or Invalid pharmacyID')
        assert.equal(resultBufferTwo[8], patientID, 'Error: Missing or Invalid patientID')
    })

});

    © 2019 GitHub, Inc.
    Terms
    Privacy
    Security
    Status
    Help

    Contact GitHub
    Pricing
    API
    Training
    Blog
    About

